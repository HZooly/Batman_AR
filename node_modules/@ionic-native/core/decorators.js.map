{"version":3,"file":"decorators.js","sourceRoot":"","sources":["../../../src/@ionic-native/core/decorators.ts"],"names":[],"mappings":"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","sourcesContent":["import { instanceAvailability, checkAvailability, wrap, wrapInstance, overrideFunction } from './plugin';\nimport { getPlugin, getPromise } from './util';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface PluginConfig {\n  /**\n   * Plugin name, this should match the class name\n   */\n  pluginName: string;\n  /**\n   * Plugin NPM package name\n   */\n  plugin: string;\n  /**\n   * Plugin object reference\n   */\n  pluginRef?: string;\n  /**\n   * Github repository URL\n   */\n  repo?: string;\n  /**\n   * Custom install command\n   */\n  install?: string;\n  /**\n   * Available installation variables\n   */\n  installVariables?: string[];\n  /**\n   * Supported platforms\n   */\n  platforms?: string[];\n}\n\nexport interface CordovaOptions {\n  /**\n   * Set to true if the wrapped method is a sync function\n   */\n  sync?: boolean;\n  /**\n   * Callback order. Set to reverse if the success/error callbacks are the first 2 arguments that the wrapped method takes.\n   */\n  callbackOrder?: 'reverse';\n  /**\n   * Callback style\n   */\n  callbackStyle?: 'node' | 'object';\n  /**\n   * Set a custom index for the success callback function. This doesn't work if callbackOrder or callbackStyle are set.\n   */\n  successIndex?: number;\n  /**\n   * Set a custom index for the error callback function. This doesn't work if callbackOrder or callbackStyle are set.\n   */\n  errorIndex?: number;\n  /**\n   * Success function property name. This must be set if callbackStyle is set to object.\n   */\n  successName?: string;\n  /**\n   * Error function property name. This must be set if callbackStyle is set to object.\n   */\n  errorName?: string;\n  /**\n   * Set to true to return an observable\n   */\n  observable?: boolean;\n  /**\n   * If observable is set to true, this can be set to a different function name that will cancel the observable.\n   */\n  clearFunction?: string;\n  /**\n   * This can be used if clearFunction is set. Set this to true to call the clearFunction with the same arguments used in the initial function.\n   */\n  clearWithArgs?: boolean;\n  /**\n   * Creates an observable that wraps a global event. Replaces document.addEventListener\n   */\n  eventObservable?: boolean;\n  /**\n   * Event name, this must be set if eventObservable is set to true\n   */\n  event?: string;\n  /**\n   * Element to attach the event listener to, this is optional, defaults to `window`\n   */\n  element?: any;\n  /**\n   * Set to true if the wrapped method returns a promise\n   */\n  otherPromise?: boolean;\n  /**\n   * Supported platforms\n   */\n  platforms?: string[];\n}\n\nexport interface CordovaCheckOptions {\n  sync?: boolean;\n  observable?: boolean;\n}\n\nexport interface CordovaFiniteObservableOptions extends CordovaOptions {\n  /**\n   * Function that gets a result returned from plugin's success callback, and decides whether it is last value and observable should complete.\n   */\n  resultFinalPredicate?: (result: any) => boolean;\n  /**\n   * Function that gets called after resultFinalPredicate, and removes service data that indicates end of stream from the result.\n   */\n  resultTransform?: (result: any) => any;\n}\n\n/**\n * @private\n */\nexport function InstanceCheck(opts: CordovaCheckOptions = {}) {\n  return (pluginObj: Object, methodName: string, descriptor: TypedPropertyDescriptor<any>): TypedPropertyDescriptor<any> => {\n    return {\n      value: function(...args: any[]): any {\n        if (instanceAvailability(this)) {\n          return descriptor.value.apply(this, args);\n        } else {\n\n          if (opts.sync) {\n            return;\n          } else if (opts.observable) {\n            return new Observable<any>(() => {});\n          }\n\n          return getPromise(() => {});\n\n        }\n      }\n    };\n  };\n}\n\n/**\n * Executes function only if plugin is available\n * @private\n */\nexport function CordovaCheck(opts: CordovaCheckOptions = {}) {\n  return (pluginObj: Object, methodName: string, descriptor: TypedPropertyDescriptor<any>): TypedPropertyDescriptor<any> => {\n    return {\n      value: function(...args: any[]): any {\n        if (checkAvailability(pluginObj) === true) {\n          return descriptor.value.apply(this, args);\n        } else {\n          if (opts.sync) {\n            return;\n          } else if (opts.observable) {\n            return new Observable<any>(() => {});\n          }\n          return getPromise(() => {});\n        }\n      }\n    };\n  };\n}\n\n\n/**\n * @private\n *\n * Class decorator specifying Plugin metadata. Required for all plugins.\n *\n * @usage\n * ```typescript\n * @Plugin({\n *  pluginName: 'MyPlugin',\n *  plugin: 'cordova-plugin-myplugin',\n *  pluginRef: 'window.myplugin'\n *  })\n *  export class MyPlugin {\n *\n *    // Plugin wrappers, properties, and functions go here ...\n *\n *  }\n * ```\n */\nexport function Plugin(config: PluginConfig) {\n  return function(cls) {\n\n    // Add these fields to the class\n    for (let k in config) {\n      cls[k] = config[k];\n    }\n\n    cls['installed'] = () => !!getPlugin(config.pluginRef);\n\n    cls['getPlugin'] = () => getPlugin(config.pluginRef);\n\n    cls['checkInstall'] = () => (checkAvailability(cls) === true);\n\n    cls['getPluginName'] = () => config.pluginName;\n\n    cls['getPluginRef'] = () => config.pluginRef;\n\n    cls['getPluginInstallName'] = () => config.plugin;\n\n    cls['getPluginRepo'] = () => config.repo;\n\n    cls['getSupportedPlatforms'] = () => config.platforms;\n\n    return cls;\n  };\n}\n\n/**\n * @private\n *\n * Wrap a stub function in a call to a Cordova plugin, checking if both Cordova\n * and the required plugin are installed.\n */\nexport function Cordova(opts: CordovaOptions = {}) {\n  return (target: Object, methodName: string, descriptor: TypedPropertyDescriptor<any>) => {\n    return {\n      value: function(...args: any[]) {\n        return wrap(this, methodName, opts).apply(this, args);\n      }\n    };\n  };\n}\n\n/**\n * @private\n *\n * Wrap an instance method\n */\nexport function CordovaInstance(opts: any = {}) {\n  return (target: Object, methodName: string) => {\n    return {\n      value: function(...args: any[]) {\n        return wrapInstance(this, methodName, opts).apply(this, args);\n      }\n    };\n  };\n}\n\n/**\n * @private\n *\n *\n * Before calling the original method, ensure Cordova and the plugin are installed.\n */\nexport function CordovaProperty(target: any, key: string) {\n  Object.defineProperty(target, key, {\n    enumerable: true,\n    get: () => {\n      if (checkAvailability(target, key) === true) {\n        return getPlugin(target.constructor.getPluginRef())[key];\n      } else {\n        return null;\n      }\n    },\n    set: (value) => {\n      if (checkAvailability(target, key) === true) {\n        getPlugin(target.constructor.getPluginRef())[key] = value;\n      }\n    }\n  });\n}\n\n/**\n * @private\n * @param target\n * @param key\n * @constructor\n */\nexport function InstanceProperty(target: any, key: string) {\n  Object.defineProperty(target, key, {\n    enumerable: true,\n    get: function(){\n      return this._objectInstance[key];\n    },\n    set: function(value){\n      this._objectInstance[key] = value;\n    }\n  });\n}\n\n/**\n * @private\n *\n * Wrap a stub function in a call to a Cordova plugin, checking if both Cordova\n * and the required plugin are installed.\n */\nexport function CordovaFunctionOverride(opts: any = {}) {\n  return (target: Object, methodName: string, descriptor: TypedPropertyDescriptor<any>) => {\n    return {\n      value: function(...args: any[]) {\n        return overrideFunction(this, methodName, opts);\n      }\n    };\n  };\n}\n\n\n/**\n * @private\n *\n * Wraps method that returns an observable that can be completed. Provided opts.resultFinalPredicate dictates when the observable completes.\n *\n */\nexport function CordovaFiniteObservable(opts: CordovaFiniteObservableOptions = {}) {\n  if (opts.observable === false) {\n    throw new Error('CordovaFiniteObservable decorator can only be used on methods that returns observable. Please provide correct option.');\n  }\n  opts.observable = true;\n  return (target: Object, methodName: string, descriptor: TypedPropertyDescriptor<any>) => {\n    return {\n      value: function(...args: any[]) {\n        let wrappedObservable: Observable<any> = wrap(this, methodName, opts).apply(this, args);\n        return new Observable<any>((observer) => {\n          let wrappedSubscription = wrappedObservable.subscribe({\n            next: (x) => {\n              observer.next(opts.resultTransform ? opts.resultTransform(x) : x);\n              if (opts.resultFinalPredicate && opts.resultFinalPredicate(x)) {\n                observer.complete();\n              }\n            },\n            error: (err) => { observer.error(err); },\n            complete: () => { observer.complete(); }\n          });\n          return () => {\n            wrappedSubscription.unsubscribe();\n          };\n        });\n      }\n    };\n  };\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}